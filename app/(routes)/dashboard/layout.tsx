import type { Metadata } from "next";
import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
import StoreUser from "./_components/StoreUser";
import { UserProvider } from "@/app/contexts/UserProvider";
import { OrganizationProvider } from "@/app/contexts/OrganizationContext";
import { api } from "@/convex/_generated/api";
import { ConvexHttpClient } from "convex/browser";
import SideNav from "./_components/Navigation/SideNav/SideNav";
import TopNav from "./_components/Navigation/topNav/TopNav";
import clsx from "clsx";
import { User, Organization } from "@/app/types"; 
import { Id } from "@/convex/_generated/dataModel";


const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export const metadata: Metadata = {
  title: "Dashboard",
  description: "Generated by create next app",
};


type ConvexOrganization = {
  _id: Id<"organizations">;
  name: string;
  ownerId: string;
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getUser }: any = getKindeServerSession();
  const kindeUser = await getUser();

  let initialUser: User | null = null;
  let initialOrganization: Organization | null = null;
  let userOrganizations: Organization[] = [];
  let organizationUsers: User[] = [];

  if (kindeUser) {
    const convexOrganizations = await convex.query(api.organizations.getUserOrganizations, { kindeId: kindeUser.id });

    if (Array.isArray(convexOrganizations)) {
      userOrganizations = convexOrganizations.map((org: ConvexOrganization): Organization => ({
        id: org._id,
        name: org.name,
        creatorId: org.ownerId,
      }));

      if (userOrganizations.length > 0) {
        initialOrganization = userOrganizations[0];
      }
    } else {
      console.error("Failed to fetch user organizations or received unexpected data format");
    }

    // Set initial user
    initialUser = {
      id: kindeUser.id,
      kindeId: kindeUser.id,
      name: `${kindeUser.given_name || ''} ${kindeUser.family_name || ''}`.trim(),
      email: kindeUser.email as string,
      given_name: kindeUser.given_name,
      family_name: kindeUser.family_name,
      organizationId: initialOrganization?.id ?? undefined,
    };

    // Fetch organization users if there's an initial organization
    if (initialOrganization) {
      const convexUsers = await convex.query(api.organizations.getOrganizationUsers, { organizationId: initialOrganization.id });
      if (Array.isArray(convexUsers)) {
        organizationUsers = convexUsers.map((user: any): User => ({
          id: user._id,
          kindeId: user.kindeId,
          email: user.email,
          name: `${user.given_name || ''} ${user.family_name || ''}`.trim(),
          given_name: user.given_name,
          family_name: user.family_name,
          organizationId: user.organizationId,
        }));
      } else {
        console.error("Failed to fetch organization users or received unexpected data format");
      }
    }
  }

  return (
    <html lang="en">
      <UserProvider initialUser={initialUser}>
        <OrganizationProvider
          initialOrganization={initialOrganization}
          initialUserOrganizations={userOrganizations}
          initialUsers={organizationUsers}
        >
          <body className="bg-[#FBFBFC] dark:bg-[#1E2024] dark:text-[#CCCCCC]">
            {kindeUser && <StoreUser user={kindeUser} />}
            <div className="h-screen flex flex-col">
              <TopNav />
              <div className="flex flex-1 overflow-hidden pt-12">
                <SideNav />
                <main className={clsx(
                  "flex-1 overflow-y-auto mr-2 mb-2 rounded-md",
                  "border bg-white",
                  "dark:bg-[#2A2E35] dark:border-[#656f7d6d]",
                )}>
                  <div>
                    {children}
                  </div>
                </main>
              </div>
            </div>
          </body>
        </OrganizationProvider>
      </UserProvider>
    </html>
  );
}